// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x3b\x97\xdb\x20\x10\x85\x6b\xfb\x57\x4c\xe8\x25\xa4\x38\x45\x8e\x8c\xd4\x24\xa9\x93\x22\xcd\x96\x18\x58\x81\x8d\x84\x16\x46\x7e\xfc\xfb\x45\xc8\x7b\xfc\xd8\x47\xb3\xeb\x66\x60\x38\xf3\x5d\x7c\x2f\x62\xdf\x7e\xff\xfd\xf5\xff\xe1\xdf\x1f\xd0\xd8\xd9\x66\xc9\xe6\xb2\x60\x5a\x71\x19\xeb\x82\xa1\x41\xab\x1a\x46\xe7\x3a\x75\x3a\x85\x1c\x84\xe6\x3e\x28\xac\xc9\x88\x8f\xd9\x4f\x02\x34\x1d\x05\xe1\xcd\x80\x10\xbc\xa8\x89\x46\x1c\x2a\x4a\x85\x93\x2a\xdf\x3e\x8d\xca\x9f\x72\xe1\x3a\x3a\x2f\xb3\x32\x2f\xcb\xbc\xc8\x3b\xd3\xe7\xdb\x40\x22\x7f\x1e\xfd\x90\xa2\x4d\xab\x27\x5d\x0c\x89\x14\xd0\x89\x1d\x9d\x9a\x69\xf5\x49\x4e\xe7\xe4\x68\x55\xa0\xea\x38\x38\x8f\xa6\x6f\xef\x79\x8c\x9e\x3d\x61\x1b\x27\x4f\x49\x40\x9a\x3d\x18\x59\x13\xe1\x7a\xe4\xa6\x57\xbe\x24\x10\xf0\x64\x55\x4d\xe2\x1f\xcb\x0e\x46\xa2\xae\x60\x55\x16\xc3\x71\x0d\x5a\x45\x59\xac\xe0\x47\x91\xb6\x1d\xf7\xad\xe9\x2b\x28\x80\x8f\xe8\x26\xa5\x48\x7b\x9b\xfa\xfd\xab\xa8\xef\x51\x6e\xa7\xd6\x03\x97\x32\x1a\x50\xa5\xb3\xf3\x26\xf3\x49\x67\x35\xb5\x48\xb3\x84\xab\x1f\x1b\xbc\x82\x17\xf6\x86\x8b\x5d\xeb\xdd\xd8\xcb\x4c\x38\xeb\x7c\x05\x76\x1a\x6c\x9d\x95\xaa\xf7\xd1\x38\x65\xad\x3b\xdc\x4a\xdc\xf1\x12\x73\x0a\x0a\x84\xe5\x21\xd4\x64\xcb\xf7\x7c\x8e\x81\xdc\x1a\xb3\x22\x0d\xb0\x94\xe9\xdd\x8d\x68\xbc\xd2\xa5\x75\x31\xe1\xfa\x45\x74\xfc\xf5\xdb\x63\x74\xce\x36\x66\x9d\xbe\x83\xe7\x00\x00\x00\xff\xff\x2b\xc9\x97\xf4\x1f\x03\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 799, mode: os.FileMode(436), modTime: time.Unix(1460621410, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\xdf\x6f\xdb\x36\x10\x7e\x96\xff\x0a\x4e\x2b\x6a\x69\x33\x64\x3b\x69\x86\x41\x41\x30\x04\x2b\x86\x75\x58\x97\xa1\x09\xb0\x87\xc0\x0f\xb4\x7c\x76\x84\xd2\xa4\x46\x52\xb6\xdb\xc2\xff\xfb\x8e\xd4\x0f\x93\x92\xdc\x79\x98\x1e\x0c\xf2\xee\xbb\x8f\x77\xfc\xf1\xf9\x76\x54\x92\xec\x85\x4a\x3d\xbf\x1d\xb5\xe3\xab\x6a\xbc\x57\xb7\xa3\xd1\xab\x68\x5d\xf2\x4c\xe7\x82\x47\x31\xf9\x32\x0a\x8c\xe3\x40\xee\x08\x87\x3d\x79\x4b\x35\x44\x31\x82\x82\x5f\xf3\xcd\x8b\x0d\x55\x89\x02\xfd\x50\x18\xbc\x8a\x10\x1e\x6c\x98\x58\x52\x96\x9a\xd0\x20\xd0\xf9\x16\x3e\x0b\x0e\x0f\xeb\x35\xc2\x52\x72\x48\x36\xa0\x9f\x3c\x63\x14\x23\xf0\x38\x0a\x8e\x31\xd2\x06\x55\x6a\xf5\x72\xce\x22\x8f\x5a\x64\x1f\x7f\x36\x63\xbb\x48\x85\xab\x17\x09\x24\xf0\x15\xc8\x27\x91\x92\x71\x26\xb8\xa6\x39\x07\x39\x1f\x4f\xac\xef\xb3\x10\xdb\xa7\x4f\x05\xa0\xef\x30\x36\x96\xe3\xa4\x4a\x4c\x33\x68\xe2\x35\x1c\x90\x6b\xfc\x01\x54\x81\x55\x00\x31\x59\x3b\xd8\x4f\xf7\x87\x5c\xb5\x58\x37\xb0\x89\x7c\x9f\x33\x96\x2b\xc0\xc5\x57\xca\x06\x9a\x82\x9a\x70\x95\x49\xc1\xd8\x92\xca\x26\x0a\x38\x5d\x32\x58\xa5\x64\x4d\x99\x82\x13\x50\x52\xbe\x81\x47\x60\x90\x69\xd1\x82\x97\xa5\xd6\x98\x54\x4a\x9e\x9b\x25\xab\x62\xaa\xd5\xea\x22\x83\x4c\x94\x1c\x13\xb9\x99\x78\x69\xdd\x34\xc9\x4c\xc8\x05\xc1\xd7\x33\x3f\xfa\x7a\x76\x2e\x7c\x9b\xf3\x52\x43\x27\x7c\xee\x47\xcf\xb7\x67\x82\x29\x63\x63\x1f\x7a\x8f\x96\x0a\xbb\xa8\x1c\xca\xee\x81\xd9\xa1\x6b\x67\x1b\x41\xe6\x70\xda\x07\x4e\xb7\xc8\x16\xde\xef\x40\xd2\x0d\x10\xe9\x9e\x5d\x58\xd1\xac\xa8\xa6\x29\xe1\x25\x63\xd5\x3c\x13\x0c\xf7\x75\xbc\x64\x65\x93\x7b\x9d\x12\xc3\x0b\xd3\x58\x84\x60\x3a\x2f\xda\x03\xde\x51\x44\x3f\x96\xeb\x75\x7e\x30\x85\xfb\xa7\xeb\x65\xf2\x9e\x1e\xfe\x4b\x16\x12\x56\xff\x3b\x09\xe2\x7e\xb8\x4b\xde\xfc\x8b\x3f\xc5\xaf\x49\x34\xe7\xbd\x44\xbb\x50\x37\xe9\xae\xaf\x2e\x60\x23\x01\xf8\xb8\xef\xf6\xcb\xe9\x79\x4f\xa5\x75\x5d\xe6\xeb\x57\xda\x45\x74\xab\x5e\x18\xf5\xb0\x92\x54\x69\xc2\xd5\xbf\x68\x47\x13\xe8\x6a\x88\x63\x1b\xd4\x92\x2b\xa7\x90\xbe\xa6\x38\x9e\xa3\x87\x6b\xa5\xc2\x8d\x6d\xb5\xe6\xef\x12\x94\x56\xa4\x00\x49\xea\xe7\x78\x9e\xa9\x55\x20\x8f\x69\x88\xbe\xe1\xb7\x8f\xd2\x63\x74\xee\x4b\x8f\xdf\x93\x28\x37\xa6\x23\x55\x67\x09\x7a\xd2\xe5\x92\xb8\x12\xe6\xe7\xda\x51\x23\xcf\x79\x92\xb4\xa1\xfa\x6e\x54\xa7\xb8\x49\x6f\x23\x2e\x20\x37\x92\x37\xc4\x6e\xa5\xef\x22\xfa\x56\x0a\x87\xe8\xe7\xc3\xec\x46\x1a\x2f\x22\xaf\xa4\x72\x88\xc2\x4a\xa6\xc7\xb1\xf0\x81\xae\x84\x9e\x3d\x35\x47\x52\xdd\xd8\x5a\x27\x3e\x14\x2a\xf4\x49\x87\x54\xa1\xaf\x60\x9e\xa7\xff\xdc\x07\x14\xed\x6b\xf7\x74\xe1\xcc\xec\x3b\x27\x9d\x6f\x3a\x95\x90\xf3\x5c\x13\x85\xaf\x1c\xf4\x84\x2c\x21\xa3\x25\x4a\x9b\x12\x5b\xc0\x2e\x83\x64\x4c\xe0\x2c\xd7\x0e\xd1\x96\x7e\x84\x47\x0b\x37\xdd\xcc\xc9\x9e\x73\x0d\x12\x73\x7b\xf7\x16\x55\x64\x9f\xf3\x95\xd8\x9b\xf6\xe6\x5d\x6d\x76\x3a\x23\xb7\x1e\xf3\x7b\x8e\x11\xcf\xf6\x87\x19\xf9\x8e\xcc\x67\xb3\x59\x3c\x32\x3d\xce\xa8\x21\xc1\x76\xab\x94\xcc\x36\x59\x06\x6b\xfa\x2c\x76\x5a\x96\x89\x8c\x1a\x54\x45\x26\x41\x97\x92\x93\x28\x62\x49\x21\x05\xea\x99\x40\xe8\xdd\x1d\x09\x5f\xb4\x2e\x54\x1a\xc6\xe4\x27\x12\xee\x95\x4a\xa7\xd3\x90\xa4\x66\x68\x46\x31\xf9\x9e\xb0\xe4\x45\x28\x6d\x8e\x14\x27\x91\x25\x10\x52\x93\x6f\xee\xc8\x8f\xb3\x98\xbc\x7e\x4d\x1c\xcb\x9b\x37\xd7\xb1\x65\x4a\x43\x1b\x69\xed\xc8\x66\x89\xc2\xe9\x5e\x85\xb7\xa3\xa3\x53\x80\x5b\x34\xfe\x55\xed\x55\xad\xbd\x7f\xc1\xb2\x36\xd7\x25\xe2\x96\xa0\x37\x11\x5c\x14\xc0\x11\xd4\x32\x54\x2d\x66\xe5\xdb\x82\x52\xe6\xaf\xdc\x75\xc3\x4e\x57\x88\x60\x3a\x9d\xe2\x43\x56\x82\x01\x6e\xcd\xc6\x38\x12\x73\x1d\x4d\xf3\x68\x5b\x54\x33\xc1\xd0\xdf\x1e\x1f\xfe\x48\x0a\x2a\x15\x9c\x20\xb7\x6d\xc3\x38\x4f\xaa\x2b\xff\x3c\x5b\x24\x74\xb5\xfa\x53\xe0\x81\x47\xcf\x06\x94\x3c\xa9\x09\xb1\x71\xbf\x30\x41\x75\x64\x6d\xf7\xbb\x4d\xbc\x98\x10\x2d\x4b\x18\x22\x99\x5f\x44\x82\x7d\xc1\xd7\x48\xae\x2e\x23\xc9\xf9\x00\xc9\xd5\x05\xe5\xe0\xdd\xad\x28\xf0\x39\xfb\x14\xaf\xa2\xf1\xb7\xed\x5f\xdc\xf5\x38\x4e\x5e\xf4\x96\x55\xd8\xdf\xa9\xd2\xd8\x0d\x97\x4c\x37\xcd\x39\x1e\xfc\x3f\x01\x00\x00\xff\xff\x81\x36\x80\x31\x3a\x0c\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 3130, mode: os.FileMode(436), modTime: time.Unix(1460622963, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{
		}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

