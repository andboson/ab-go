// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x3f\x93\xdb\x20\x10\xc5\x6b\xfb\x53\x6c\xe8\x25\xa4\x38\x45\x46\x46\x6a\x92\xd4\x49\x91\x26\x25\x06\x22\xb0\xf9\xa3\x83\x95\x6d\x7d\xfb\x1b\x21\xdf\x9c\xed\xfb\xd3\xdc\xa9\x01\x1e\xb3\xbf\xa7\xd9\xb7\xb0\x2f\x3f\x7f\xff\xf8\xfb\xef\xcf\x2f\xd0\xe8\x6c\xb7\x66\xcb\xb2\x62\x5a\x71\xd9\xad\x57\x2b\x86\x06\xad\xea\x18\x5d\xd6\x59\x71\x0a\x39\x08\xcd\x63\x52\xd8\x92\x11\xff\x17\xdf\x09\xd0\x7c\x95\x44\x34\x03\x42\x8a\xa2\x25\x1a\x71\x68\x28\x15\x41\xaa\x72\xff\x30\xaa\x38\x95\x22\x38\xba\x6c\x8b\xba\xac\xeb\xb2\x2a\x9d\xf1\xe5\x3e\x91\x8e\xd1\xa5\xf4\x5d\x8a\x36\xbd\x9e\x7d\x31\x65\x52\xc2\x20\x0e\x74\x16\xf3\xee\x83\x1c\x17\xe4\x68\x55\xa2\xea\x3c\x84\x88\xc6\xf7\xf7\x3c\x46\x2f\x3d\x61\xbb\x20\xa7\x6c\x20\xcd\x11\x8c\x6c\x89\x08\x1e\xb9\xf1\x2a\xd6\x04\x12\x4e\x56\xb5\xc4\x19\x5f\x9c\x8c\x44\xdd\xc0\xa6\xae\x86\xf3\x16\xb4\x32\xbd\xc6\x06\xbe\x55\xf9\xe8\x78\xec\x8d\x6f\xa0\x02\x3e\x62\x98\x9d\xa4\x39\xbe\x4e\xfd\xfa\x59\xd4\xb7\x28\xb7\x55\xdb\x81\x4b\x69\x7c\xdf\xe4\xbb\xcb\xa1\x88\xd9\x67\x33\x4b\xa4\x5b\xc3\xd5\xc7\x86\xa8\xe0\x89\xbd\xe3\xe2\xd0\xc7\x30\x7a\x59\x88\x60\x43\x6c\xc0\xce\x85\x7d\xb0\x52\xf9\x18\xe4\xa4\xac\x0d\xa7\x5b\x8b\x3b\x5e\x66\xce\x41\x81\xb0\x3c\xa5\x96\xec\xf9\x91\x2f\x31\x90\xdb\xc6\x6c\x48\x07\x2c\x67\x7a\xf7\x47\x74\x88\x57\xd2\x73\x13\xae\x27\xc2\xf1\x97\xb3\xc7\xe8\x92\x2d\xa3\xcb\x3b\x78\x0c\x00\x00\xff\xff\x2b\xc9\x97\xf4\x1f\x03\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 799, mode: os.FileMode(420), modTime: time.Unix(1646329654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x8f\xe2\x36\x10\x7e\x4e\xfe\x8a\x69\x7a\x3a\x92\x1e\x0a\xb0\x7b\x5b\x55\x41\xa8\x5a\xf5\x54\x75\xab\x6e\xb7\xda\x5d\xa9\x0f\x2b\x1e\x4c\x18\xc0\x5a\x63\xa7\xb6\x03\xdc\xad\xf8\xdf\x2b\x3b\x3f\xb0\x21\x5c\xa9\x2e\x0f\x28\x99\xf9\xbe\xcf\x33\x76\xf2\x31\x1b\x22\x21\x5f\x11\xa9\x47\xe3\xb0\xbd\xbf\xaa\xee\xb7\x6a\x1c\x86\xef\xe2\x45\xc9\x73\x4d\x05\x8f\x13\x78\x0b\x03\x93\xd8\xc1\x04\x38\x6e\xe1\x13\xd1\x18\x27\xe3\x30\x0c\x7e\xa3\xcb\x95\xa5\xaa\x54\xa1\x7e\x28\x0c\x5e\xc5\x6f\x61\x10\x2c\x99\x98\x11\x96\x19\x6a\x10\x68\xba\xc6\x2f\x82\xe3\xc3\x62\xa1\x50\x67\xb0\x4b\x97\xa8\x9f\xbd\x60\x9c\x84\x41\xb0\x0f\x83\x7d\x12\x86\x41\x50\x95\x56\x2f\xe7\x2c\xf2\xa4\x45\xfe\xfa\x8b\xb9\xb7\x8b\x54\xb8\x7a\x91\x40\x22\x9f\xa3\x7c\x16\x19\xf4\x72\xc1\x35\xa1\x1c\xe5\xa8\xd7\xb7\xb9\x2f\x42\xac\x9f\x3f\x17\x98\x41\x6f\xd7\x33\x91\x7d\xbf\x2a\x4c\x33\x6c\xf8\x1a\x77\x3a\x83\xde\x23\xaa\x42\x70\x85\x60\xaa\x76\xb0\x9f\x6f\x77\x54\xb5\x58\x97\xd8\x30\xef\x29\x63\x54\x61\x2e\xf8\x5c\x59\xa2\x69\xa8\xa1\xab\x5c\x0a\xc6\x66\x44\x36\x2c\xe4\x64\xc6\x70\x9e\xc1\x82\x30\x85\x07\xa0\x24\x7c\x89\x4f\xc8\x30\xd7\xa2\x05\xcf\x4a\xad\x05\x57\x19\xbc\x34\x4b\x56\xcd\x54\xab\xd5\x4d\x06\xb9\x28\xb9\xce\xe0\xa6\xef\x95\x75\xd3\x14\xd3\x87\x0b\xc8\xd7\x43\x9f\x7d\x3d\x3c\x47\x5f\x53\x5e\x6a\x3c\xa2\x8f\x7c\xf6\x68\x7d\x86\x4c\x18\xeb\xf9\xd0\x5b\xc6\x6a\xec\xb4\x4a\x28\xbb\x07\x66\x87\xae\x9d\x6d\x44\x49\xf1\xb0\x0f\x9c\xac\x31\x83\xe8\x76\x83\x92\x2c\x11\xa4\x7b\x76\x51\x25\x33\x27\x9a\x64\xc0\x4b\xc6\xaa\xe7\x5c\x30\x21\xb3\xde\x8c\x95\x4d\xed\x75\x49\x8c\xf2\x36\x22\x04\xd3\xb4\x68\x0f\x78\x43\x58\x89\x4f\xe5\x62\x41\x77\xa6\x71\xff\x74\xbd\x4a\xee\xc9\xee\xff\x54\x21\x71\xfe\xcd\x45\x80\x7b\xed\xfb\xfe\xf3\x9b\xff\x08\x00\x4d\xa1\x94\x9f\x14\x7a\x0c\x75\x8b\x3e\xce\xd5\x0d\x2c\x25\x22\xef\x9d\xa6\xfd\x76\x4e\xb2\x87\xd6\x8e\x53\xe6\x3a\xed\xf4\x18\x71\xdc\xf5\xd4\xb8\x87\xb5\xa4\xca\x13\xae\xfe\xc3\x3b\x1a\xa2\xeb\x21\x4e\xac\xd3\x4b\xae\x9c\x46\x4e\x3d\xc5\xc9\xec\x3d\x5c\x6b\x15\x2e\xb7\xf5\x9a\x7f\x4a\x54\x5a\x41\x81\x12\xea\xcf\xf1\xbc\x52\xeb\x40\x9e\x52\x97\x7c\xa3\x6f\x3f\x4a\x4f\xd1\x79\x5f\x4e\xf4\x3d\x8b\x72\x39\x47\x56\x75\x56\xe0\xc4\xba\x5c\x11\xd7\xc2\xfc\x5a\x8f\xdc\xc8\x4b\x1e\x2c\xad\xab\xbf\x1b\x75\xd4\x5c\xff\x64\x23\x2e\x10\x37\x96\xd7\xa5\x6e\xad\xef\x22\xf9\xd6\x0a\xbb\xe4\x47\xdd\xea\xc6\x1a\x2f\x12\xaf\xac\xb2\x4b\xc2\x5a\xa6\xa7\x31\xf5\x81\xae\x85\x9e\x3f\xf6\x83\xa5\xba\xdc\xda\x27\x1e\x0b\x15\xf9\xa2\x5d\xae\x70\xea\x60\x5e\xe6\xf4\x73\xef\x70\xb4\xaf\xbd\xa7\x53\xe7\xc9\x7e\xe7\x70\x74\x0d\x06\x12\x29\xa7\x1a\x94\xc8\x5f\x51\xf7\x61\x86\x39\x29\x15\x82\x12\x6b\x14\x1c\x21\x67\x42\x21\x50\xed\x08\xad\xc9\x2b\x3e\x59\xb8\x99\x66\x0e\x71\xca\x35\xca\x0d\x61\x77\x9f\x60\x02\x5b\xca\xe7\x62\x6b\xc6\x9b\xbb\x3a\xec\x4c\x46\x6e\x3f\xe6\xf7\x9c\xe2\xbe\x0f\x3f\x0e\xe1\x07\x18\x0d\x87\xc3\x24\x34\x33\x4e\xd8\x88\xc0\x56\x95\x92\xd9\x21\x0b\xac\xf5\x49\x60\x87\x65\x99\xc8\x89\x41\x55\x62\x12\x75\x29\x39\xc4\x31\x4b\x0b\x29\xb4\xc8\x05\x83\xc9\x64\x02\xd1\x4a\xeb\x42\x65\x51\x02\x3f\x43\xb4\x55\x2a\x1b\x0c\x22\xc8\xcc\xad\xb9\x4b\xe0\x03\xb0\x74\x25\x94\x36\x47\x0a\x1f\x20\xb6\x02\x42\x6a\xf8\x6e\x02\x3f\x0d\x13\x78\xff\x1e\x9c\xc8\xc7\x8f\xd7\x89\x55\xca\x22\xcb\xb4\xf1\x0c\x22\x2b\x14\x0d\xb6\x2a\x1a\x87\x7b\xa7\x01\xb7\xe9\xb7\x30\xd8\xaa\xda\x7b\xff\xc6\x59\x1d\xae\x5b\x4c\xc6\x26\x9b\x0a\x2e\x0a\xe4\x30\x81\x56\xa1\x1a\x31\xab\xdc\x1a\x95\x32\x7f\xe5\x6e\x1a\x37\xba\x42\x04\x83\xc1\x20\x17\x5c\x09\x86\x29\x13\x4b\x93\x48\xcd\xeb\x68\x86\x47\x3b\xa2\x9a\x07\x98\xc0\xef\x4f\x0f\x7f\xa6\x05\x91\x0a\x0f\x90\x71\x3b\x30\x8e\xd2\xea\x95\x7f\x19\x4e\x53\x32\x9f\xff\x25\x28\xd7\xf1\x8b\x01\xa5\xcf\xaa\x0f\x96\xf7\x2b\x13\x44\xc7\x36\x76\xbb\x59\x26\xd3\x3e\x68\x59\x62\x97\xc8\xe8\x22\x91\x7b\xb2\xfb\x9a\xc8\xd5\x65\x22\x94\x77\x88\x5c\x5d\xd0\xce\x1d\xaf\x25\x1e\x0b\xe5\x4b\xbc\x8b\x7b\xdf\xb7\x7f\x71\xd7\xbd\x24\x5d\xe9\x35\xab\xb0\x7f\x10\xa5\x1f\x51\x95\x4c\x37\xc3\xf9\x38\xdc\xff\x1b\x00\x00\xff\xff\x81\x36\x80\x31\x3a\x0c\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 3130, mode: os.FileMode(420), modTime: time.Unix(1646329654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

