// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x92\xb1\x52\xf5\x20\x10\x85\xeb\xfb\x3f\xc5\xfe\xf4\x81\x44\x2d\x9c\x48\x6e\xa3\xd6\x5a\xd8\x58\x22\xac\x81\x6b\x08\x11\x36\x7a\xf3\xf6\x12\x62\xe1\xa8\x63\xa3\xd5\x59\x96\xe1\x3b\x73\xce\x20\xff\x5f\xdd\x5c\xde\xdd\xdf\x5e\x83\x25\x3f\xec\xff\xc9\x4d\x76\xd2\xa2\x32\x59\x77\x92\x1c\x0d\xb8\x97\x62\xd3\x75\xe3\x91\x14\x68\xab\x62\x42\xea\xd8\x4c\x8f\xd5\x39\x03\x51\xae\x92\x8e\x6e\x22\x48\x51\x77\xcc\x12\x4d\xad\x10\x3a\x18\xe4\x87\xe7\x19\xe3\xc2\x75\xf0\x62\x1b\xab\x86\x37\x0d\xaf\xb9\x77\x23\x3f\x24\x96\xf9\xdb\xd3\x1f\x29\xd6\xf5\x76\xf5\xa5\x54\x48\x89\x82\x7e\x12\xeb\xb2\x4c\xbf\xe4\xf8\x60\xe6\x01\x93\xc0\xe3\x14\x22\xb9\xb1\xff\xcc\x93\xe2\xbd\x13\xf9\x10\xcc\x52\x0c\x8c\x7b\x01\x67\x3a\xa6\xc3\x48\xca\x8d\x18\x1b\x06\x89\x96\x01\x3b\x96\x83\x55\xaf\xce\x90\x6d\xe1\xb4\xa9\xa7\xe3\x05\x58\xcc\xb6\xd4\xc2\x59\x5d\x8e\x5e\xc5\xde\x8d\x2d\xd4\xa0\x66\x0a\xab\x53\xa6\x7d\x4f\x3d\xf9\x0b\xea\xc7\x32\xbc\xfa\x5a\xbb\x14\x5b\xac\x1c\xb3\x7c\x81\xb7\x00\x00\x00\xff\xff\x7d\xcc\x2c\xee\x1a\x02\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 538, mode: os.FileMode(436), modTime: time.Unix(1436511940, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x5d\x8f\xe2\x36\x14\x7d\x0e\xbf\xc2\x8d\xaa\x25\x51\x51\x18\x98\x1d\xa9\x0a\x1a\x55\xa3\x56\x55\x5b\x69\x3b\xd5\x32\x52\x1f\x46\x3c\x98\x70\x61\xa2\x1a\x3b\xb5\x1d\x60\x77\xc5\x7f\xef\xb5\xf3\x81\x9d\x84\x2d\x55\x79\x8a\x7d\xcf\x39\xbe\xf7\xda\x3e\xf8\x40\x25\xc9\xde\xa8\xd4\xb3\xc5\xa8\xfd\x9e\x2f\x46\xa3\x6f\xa3\x6d\xc9\x33\x9d\x0b\x1e\xc5\xe4\xcb\x28\x30\xc1\x13\x79\x24\x1c\x8e\xe4\x27\xaa\x21\x8a\x11\x14\xfc\x92\xef\xde\x2c\x45\x25\x0a\xf4\x73\x61\xf0\x2a\x42\x78\xb0\x63\x62\x4d\x59\x6a\xa8\x41\xa0\xf3\x3d\x7c\x16\x1c\x9e\xb7\x5b\x84\xa5\xe4\x94\xec\x40\xbf\x78\x93\x51\x8c\xc0\xf3\x28\x38\xc7\x28\x1b\x54\x29\xd5\xcb\x39\x8b\x2c\xb5\xc8\xfe\xfa\xd1\x7c\xdb\x45\x2a\x5c\xbd\x48\x20\x81\x6f\x40\xbe\x88\x94\x8c\x33\xc1\x35\xcd\x39\xc8\xd9\x78\x62\x63\x9f\x85\xd8\xbf\x7c\x2a\x00\x63\xa7\xb1\x99\x39\x4f\xaa\xc4\x34\x83\x86\xaf\xe1\x84\x5a\xe3\x8f\xa0\x0a\xac\x02\x88\xc9\xda\xc1\x7e\x7a\x3a\xe5\xaa\xc5\xba\xc4\x86\xf9\x21\x67\x2c\x57\x80\x8b\x6f\x94\x25\x9a\x82\x1a\xba\xca\xa4\x60\x6c\x4d\x65\xc3\x02\x4e\xd7\x0c\x36\x29\xd9\x52\xa6\xe0\x02\x94\x94\xef\x60\x09\x0c\x32\x2d\x5a\xf0\xba\xd4\x1a\x93\x4a\xc9\x6b\xb3\x64\x55\x4c\xb5\x5a\x5d\x64\x90\x89\x92\x63\x22\x0f\x13\x2f\xad\x87\x26\x99\x09\xb9\x81\x7c\x7f\xe7\xb3\xef\xef\xae\xd1\xf7\x39\x2f\x35\x74\xe8\x33\x9f\x3d\xdb\x5f\x21\x53\xc6\xc6\x3e\xf4\x09\x67\x2a\xec\xaa\x0a\x28\xdb\x03\xd3\xa1\x7b\xa7\x8d\x20\x73\xb8\xf4\x81\xd3\x3d\xaa\x85\x4f\x07\x90\x74\x07\x44\xba\x7b\x17\x56\x32\x1b\xaa\x69\x4a\x78\xc9\x58\x35\xce\x04\xc3\xbe\x8e\xd7\xac\x6c\x72\xaf\x53\x62\x78\x60\x9a\x19\x21\x98\xce\x8b\x76\x83\x0f\x14\xd1\xcb\x72\xbb\xcd\x4f\xa6\x70\x7f\x77\xbd\x4c\x3e\xd0\xd3\x7f\xc9\x42\xc2\xe6\x7f\x27\x41\xdc\x1f\x76\xc9\x1b\x7f\xf1\x87\xf8\x6b\x12\xcd\x79\x2f\xd1\x2e\xd4\x4d\xba\x1b\xab\x0b\xd8\x49\x00\x3e\xee\x87\xfd\x72\x7a\xd1\x4b\x69\xdd\x90\xf9\xf5\x2b\xed\x22\xba\x55\xaf\x8c\x7b\x58\x4b\xaa\x3c\x61\xfe\x2f\xde\xd1\x10\x5d\x0f\x71\xe6\x06\xbd\x64\xee\x14\xd2\xf7\x14\x27\x72\xf6\x70\xad\x55\xb8\xdc\xd6\x6b\xfe\x2e\x41\x69\x45\x0a\x90\xa4\x75\x8e\xab\x52\xad\x05\x79\x52\x43\xfa\xcd\x02\xf6\x56\x7a\x8a\xce\x81\xe9\xe9\x7b\x1e\xe5\x72\x3a\x5e\x75\x55\xa0\xe7\x5d\xae\x88\xeb\x61\x7e\xae\x1d\x3b\xf2\x82\x17\x4f\x1b\xaa\xef\x41\x75\x8a\x9b\xf4\x1a\x71\x83\xb8\xf1\xbc\x21\x75\xeb\x7d\x37\xc9\xb7\x5e\x38\x24\x3f\x1b\x56\x37\xde\x78\x93\x78\xe5\x95\x43\x12\xd6\x33\x3d\x8d\x95\x0f\x74\x3d\xf4\xea\xae\x39\x9e\xea\x72\x6b\xa3\xf8\x58\xa8\xd0\x17\x1d\xb2\x85\xbe\x85\x79\x91\xfe\x7d\x1f\xb0\xb4\xaf\x9d\xd3\x95\x33\xaa\x2e\x7a\xf3\x3e\x21\x47\x55\x4a\x56\xbd\x52\xec\x33\x85\xe1\xdd\x3f\xe6\x7c\x23\x8e\x09\x13\x19\x35\x98\xc5\xc8\x5c\x69\x5d\x4a\x4e\xa2\x88\x25\x85\x14\x68\x06\x02\x81\x8f\x8f\x24\x7c\xd3\xba\x50\x69\x18\x93\x1f\x48\x78\x54\x2a\x9d\x4e\x43\x92\x9a\x4f\xf3\x15\x93\xef\x08\x4b\xde\x84\xd2\xa6\x1d\x38\x88\xac\x80\x90\x9a\x7c\xf3\x48\xbe\xbf\x8b\xc9\xbb\x77\xc4\x99\x79\xff\xfe\x3e\xb6\x4a\x69\x68\x99\x76\x1e\xd5\xac\x50\x38\x3d\xaa\x10\x73\x39\x63\xfa\x47\x55\x5b\xd4\x9f\xb0\x5e\xa2\x33\xe1\x13\xa8\x2e\x04\xab\xc3\x68\x22\xb8\x28\x80\x23\xa8\x2d\xb4\xae\xd1\xc6\xf6\xa0\x94\xf9\xc7\x73\xc3\x70\xd0\x15\x22\x98\x4e\xf1\xb4\x2b\xc1\x00\x3b\xb0\x33\xf3\x89\xd9\x33\xf3\xc4\xb2\x1d\x32\x03\x64\xfe\xb6\x7c\xfe\x3d\x29\xa8\x54\x70\x81\x2c\xda\x67\xd5\x2c\xa9\xce\xc5\xeb\xdd\x2a\xa1\x9b\xcd\x1f\x22\xe7\x3a\x7a\x35\xa0\xe4\x45\x4d\x88\xe5\xfd\xcc\x04\xd5\x91\x9d\x7b\x3a\xec\xe2\xd5\x84\x68\x59\xc2\x90\xc8\xec\x26\x11\xfc\xf7\xfc\x9a\xc8\xfc\x36\x91\x9c\x0f\x88\xcc\x6f\x28\xe7\x57\x5e\x4b\xe0\x99\xf7\x24\xcc\xc3\x74\x31\xc2\xb7\xe9\x3f\x01\x00\x00\xff\xff\x5a\x33\x9c\xec\x30\x0b\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 2864, mode: os.FileMode(436), modTime: time.Unix(1436511940, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{
		}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

