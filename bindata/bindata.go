// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x92\xb1\x52\xf5\x20\x10\x85\xeb\xfb\x3f\xc5\xfe\xf4\x81\x44\x2d\x9c\x48\x6e\xa3\xd6\x5a\xd8\x58\x22\xac\x81\x6b\x08\x11\x36\x7a\xf3\xf6\x12\x62\xe1\xa8\x63\xa3\xd5\x59\x96\xe1\x3b\x73\xce\x20\xff\x5f\xdd\x5c\xde\xdd\xdf\x5e\x83\x25\x3f\xec\xff\xc9\x4d\x76\xd2\xa2\x32\x59\x77\x92\x1c\x0d\xb8\x97\x62\xd3\x75\xe3\x91\x14\x68\xab\x62\x42\xea\xd8\x4c\x8f\xd5\x39\x03\x51\xae\x92\x8e\x6e\x22\x48\x51\x77\xcc\x12\x4d\xad\x10\x3a\x18\xe4\x87\xe7\x19\xe3\xc2\x75\xf0\x62\x1b\xab\x86\x37\x0d\xaf\xb9\x77\x23\x3f\x24\x96\xf9\xdb\xd3\x1f\x29\xd6\xf5\x76\xf5\xa5\x54\x48\x89\x82\x7e\x12\xeb\xb2\x4c\xbf\xe4\xf8\x60\xe6\x01\x93\xc0\xe3\x14\x22\xb9\xb1\xff\xcc\x93\xe2\xbd\x13\xf9\x10\xcc\x52\x0c\x8c\x7b\x01\x67\x3a\xa6\xc3\x48\xca\x8d\x18\x1b\x06\x89\x96\x01\x3b\x96\x83\x55\xaf\xce\x90\x6d\xe1\xb4\xa9\xa7\xe3\x05\x58\xcc\xb6\xd4\xc2\x59\x5d\x8e\x5e\xc5\xde\x8d\x2d\xd4\xa0\x66\x0a\xab\x53\xa6\x7d\x4f\x3d\xf9\x0b\xea\xc7\x32\xbc\xfa\x5a\xbb\x14\x5b\xac\x1c\xb3\x7c\x81\xb7\x00\x00\x00\xff\xff\x7d\xcc\x2c\xee\x1a\x02\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 538, mode: os.FileMode(436), modTime: time.Unix(1436511940, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\xdd\x8e\xdb\x36\x13\xbd\x96\x9f\x82\x9f\xf0\x21\x96\x5a\x43\xb6\x77\xb3\x45\xa1\xc5\xa2\x58\x34\x28\x9a\x02\xe9\x16\xf1\x02\xbd\x58\xf8\x82\x96\xc7\x5e\x21\x34\xa9\x92\x94\xed\x24\xf0\xbb\x77\x48\xfd\x98\x94\xe4\xd4\x45\x75\x61\x90\x33\x67\x0e\x67\xf8\x73\x3c\x7b\x2a\x49\xf6\x4a\xa5\x9e\xdf\x8f\xda\xf1\x4d\x35\x3e\xa8\xfb\xd1\xe8\xff\xd1\xa6\xe4\x99\xce\x05\x8f\x62\xf2\x75\x14\x18\xc7\x91\x3c\x10\x0e\x07\xf2\x8e\x6a\x88\x62\x04\x05\xbf\xe6\xdb\x57\x1b\xaa\x12\x05\xfa\xa9\x30\x78\x15\x21\x3c\xd8\x32\xb1\xa2\x2c\x35\xa1\x41\xa0\xf3\x1d\x7c\x11\x1c\x9e\x36\x1b\x84\xa5\xe4\x98\x6c\x41\x3f\x7b\xc6\x28\x46\xe0\x69\x14\x9c\x62\xa4\x0d\xaa\xd4\xea\xe5\x9c\x45\x16\x5a\x64\x9f\x7e\x36\x63\xbb\x48\x85\xab\x17\x09\x24\xf0\x35\xc8\x67\x91\x92\x71\x26\xb8\xa6\x39\x07\x39\x1f\x4f\xac\xef\x8b\x10\xbb\xe7\xcf\x05\xa0\xef\x38\x36\x96\xd3\xa4\x4a\x4c\x33\x68\xe2\x35\x1c\x91\x6b\xfc\x11\x54\x81\x55\x00\x31\x59\x3b\xd8\xcf\x8f\xc7\x5c\xb5\x58\x37\xb0\x89\xfc\x90\x33\x96\x2b\xc0\xc5\xd7\xca\x06\x9a\x82\x9a\x70\x95\x49\xc1\xd8\x8a\xca\x26\x0a\x38\x5d\x31\x58\xa7\x64\x43\x99\x82\x33\x50\x52\xbe\x85\x05\x30\xc8\xb4\x68\xc1\xab\x52\x6b\x4c\x2a\x25\x2f\xcd\x92\x55\x31\xd5\x6a\x75\x91\x41\x26\x4a\x8e\x89\xdc\x4d\xbc\xb4\xee\x9a\x64\x26\xe4\x8a\xe0\xdb\x99\x1f\x7d\x3b\xbb\x14\xbe\xcb\x79\xa9\xa1\x13\x3e\xf7\xa3\xe7\xbb\x0b\xc1\x94\xb1\xb1\x0f\x7d\x44\x4b\x85\x5d\x56\x0e\x65\xf7\xc0\xec\xd0\xad\xb3\x8d\x20\x73\x38\xef\x03\xa7\x3b\x64\x0b\x1f\xf7\x20\xe9\x16\x88\x74\xcf\x2e\xac\x68\xd6\x54\xd3\x94\xf0\x92\xb1\x6a\x9e\x09\x86\xfb\x3a\x5e\xb1\xb2\xc9\xbd\x4e\x89\xe1\x85\x69\x2c\x42\x30\x9d\x17\xed\x01\xef\x29\xa2\x17\xe5\x66\x93\x1f\x4d\xe1\xfe\xe9\x7a\x99\x7c\xa0\xc7\x7f\x93\x85\x84\xf5\x7f\x4e\x82\xb8\x1f\xee\x92\x37\xff\xea\x4f\xf1\x6b\x12\xcd\x79\x2f\xd1\x2e\xd4\x4d\xba\xeb\xab\x0b\xd8\x4a\x00\x3e\xee\xbb\xfd\x72\x7a\xde\x73\x69\x5d\x97\xf9\xfa\x95\x76\x11\xdd\xaa\x97\x46\x3d\xac\x24\x55\x9a\x70\xf3\x0f\xda\xd1\x04\xba\x1a\xe2\xd8\x06\xb5\xe4\xc6\x29\xa4\xaf\x29\x8e\xe7\xe4\xe1\x5a\xa9\x70\x63\x5b\xad\xf9\xab\x04\xa5\x15\x29\x40\x92\xfa\x39\x5e\x66\x6a\x15\xc8\x63\x1a\xa2\x6f\xf8\xed\xa3\xf4\x18\x9d\xfb\xd2\xe3\xf7\x24\xca\x8d\xe9\x48\xd5\x45\x82\x9e\x74\xb9\x24\xae\x84\xf9\xb9\x76\xd4\xc8\x73\x9e\x25\x6d\xa8\xbe\x3b\xd5\x29\x6e\xd2\xdb\x88\x2b\xc8\x8d\xe4\x0d\xb1\x5b\xe9\xbb\x8a\xbe\x95\xc2\x21\xfa\xf9\x30\xbb\x91\xc6\xab\xc8\x2b\xa9\x1c\xa2\xb0\x92\xe9\x71\x2c\x7d\xa0\x2b\xa1\x17\x4f\xcd\x91\x54\x37\xb6\xd6\x89\x8f\x85\x0a\x7d\xd2\x21\x55\xe8\x2b\x98\xe7\xe9\x3f\xf7\x01\x45\xfb\xd6\x3d\x5d\x3a\x33\xfb\xce\x49\xe7\x9b\x4e\x25\xe4\x3c\xd7\x44\xe1\x2b\x07\x3d\x21\x2b\xc8\x68\x89\xd2\xa6\xc4\x0e\xb0\xcb\x20\x19\x13\x38\xcb\xb5\x43\xb4\xa3\x9f\x60\x61\xe1\xa6\x9b\x39\xdb\x73\xae\x41\x62\x6e\xef\xdf\xa1\x8a\x1c\x72\xbe\x16\x07\xd3\xde\xbc\xaf\xcd\x4e\x67\xe4\xd6\x63\x7e\x2f\x31\xe2\xd9\xfe\x30\x23\xdf\x91\xf9\x6c\x36\x8b\x47\xa6\xc7\x19\x35\x24\xd8\x6e\x95\x92\xd9\x26\xcb\x60\x4d\x9f\xc5\xce\xcb\x32\x91\x51\x83\xaa\xc8\x24\xe8\x52\x72\x12\x45\x2c\x29\xa4\x40\x3d\x13\x08\x7d\x78\x20\xe1\xab\xd6\x85\x4a\xc3\x98\xfc\x44\xc2\x83\x52\xe9\x74\x1a\x92\xd4\x0c\xcd\x28\x26\xdf\x13\x96\xbc\x0a\xa5\xcd\x91\xe2\x24\xb2\x04\x42\x6a\xf2\xbf\x07\xf2\xe3\x2c\x26\x6f\xde\x10\xc7\xf2\xf6\xed\x6d\x6c\x99\xd2\xd0\x46\x5a\x3b\xb2\x59\xa2\x70\x7a\x50\xe1\xfd\xe8\xe4\x14\xe0\x16\x8d\x7f\x55\x07\x55\x6b\xef\x9f\xb0\xaa\xcd\x75\x89\xb8\x25\xe8\x4d\x04\x17\x05\x70\x04\xb5\x0c\x55\x8b\x59\xf9\x76\xa0\x94\xf9\x2b\x77\xdd\xb0\xd7\x15\x22\x98\x4e\xf1\x1d\x2b\xc1\x00\x77\x66\x6b\xec\x89\xb9\x8d\xa6\x77\xb4\x1d\xaa\x99\x60\xe4\x6f\x8b\xa7\xdf\x93\x82\x4a\x05\x67\xc8\x7d\xdb\x2f\xce\x93\xea\xc6\xbf\xcc\x96\x09\x5d\xaf\xff\x10\x78\xde\xd1\x8b\x01\x25\xcf\x6a\x42\x6c\xdc\x2f\x4c\x50\x1d\x59\xdb\xe3\x7e\x1b\x2f\x27\x44\xcb\x12\x86\x48\xe6\x57\x91\x60\x5b\xf0\x2d\x92\x9b\xeb\x48\x72\x3e\x40\x72\x73\x45\x39\x78\x75\x2b\x0a\x7c\xcd\x1e\x85\xe9\xb8\xf1\x34\xff\x0e\x00\x00\xff\xff\x84\x91\x9f\x2c\x0f\x0c\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 3087, mode: os.FileMode(436), modTime: time.Unix(1436771986, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{
		}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

